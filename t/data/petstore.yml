---
swagger: "2.0"
info: 
  version: "1.0.0"
  title: "Swagger Petstore, PerlSwagger edition"
  description: "A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification. Modified for use in PerlSwagger tests"
  termsOfService: "http://swagger.io/terms/"
  contact: 
    name: "Swagger API Team"
  license: 
    name: "MIT"
host: "petstore.swagger.io"
basePath: "/api"
schemes: 
  - "http"
consumes: 
  - "application/json"
produces: 
  - "application/json"
paths: 
  /pets: 
    get: 
      description: "Returns all pets from the system that the user has access to"
      x-handler: "t::PerlSwagger::TestApi->retrieve_pets"
      produces: 
        - "application/json"
      responses: 
        "200":
          description: "A list of pets."
          schema: 
            type: "array"
            items: 
              $ref: "#/definitions/Pet"
    post:
      description: "Add new pet to the store"
      x-handler: "t::PerlSwagger::TestApi->add_pet"
      produces:
        - "application/json"
      parameters:
        -
          name: "name"
          in: "body"
          required: true
          schema:
            type: "string"
        -
          name: "tag"
          in: "body"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "Pet added and full dataset returned in response body"
          schema:
            $ref: "#/definitions/Pet"
  "/pets/{id}":
    parameters:
      -
        name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
    get:
      description: "Return the pet with the given ID"
      x-handler: "t::PerlSwagger::TestApi->retrieve_pet_by_id"
      produces:
        - "application/json"
      responses:
        "200":
          description: "The pet was found an is returned"
          schema:
            $ref: "#/definitions/Pet"
        "404":
          description: "There is no pet with the given ID"
definitions: 
  Pet: 
    type: "object"
    required: 
      - "id"
      - "name"
    properties: 
      id: 
        type: "integer"
        format: "int64"
      name: 
        type: "string"
      tag: 
        type: "string"
